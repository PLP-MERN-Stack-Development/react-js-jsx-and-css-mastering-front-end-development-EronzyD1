import { useParams } from 'react-router-dom';
import useFetch from '../hooks/useFetch.js';
import { getCountryByCode } from '../api/countries.js';
import { getCurrentWeather } from '../api/weather.js';
import Spinner from '../components/Spinner.jsx';
import WeatherCard from '../components/WeatherCard.jsx';
import { formatNumber } from '../utils/format.js';
function toList(obj){ if(!obj || typeof obj!=='object' || Array.isArray(obj)) return '—'; const out=[]; for(const key of Object.keys(obj)){ const val=obj[key]; if(val && typeof val==='object'){ if(val.name) out.push(val.name); else out.push(String(key)); } else if(typeof val==='string'){ out.push(val); } } return out.length? out.join(', ') : '—'; }
export default function Country(){ const { code } = useParams(); const { data: country, pending: loadingCountry, error: errorCountry } = useFetch(()=>getCountryByCode(code), [code]); const { data: weather, pending: loadingWeather, error: errorWeather } = useFetch(async ()=>{ const ll = country && Array.isArray(country.latlng) ? country.latlng : null; const ok = ll && ll.length>=2 && typeof ll[0]==='number' && typeof ll[1]==='number'; if(!ok) return null; return await getCurrentWeather(ll[0], ll[1]); }, [country && Array.isArray(country.latlng) ? country.latlng.join(',') : '']); if(loadingCountry) return <Spinner label='Loading country...' />; if(errorCountry) return <p className='text-red-600'>{String(errorCountry)}</p>; if(!country) return null; const timezones = Array.isArray(country.timezones)&&country.timezones.length ? country.timezones.join(', ') : '—'; const capital = Array.isArray(country.capital)&&country.capital.length ? country.capital[0] : '—'; return (<section className='space-y-6'><div className='flex items-start gap-4'><img src={country.flags?.png || country.flags?.svg} alt={`${country?.name?.common ?? 'Flag'}`} className='h-14 w-20 rounded-md object-cover ring-1 ring-gray-200' /><div><h1 className='text-2xl font-bold'>{country?.name?.common ?? '—'}</h1><p className='opacity-80 text-sm'>Region: {country?.region ?? '—'} • Subregion: {country?.subregion ?? '—'} • Capital: {capital}</p><p className='opacity-80 text-sm'>Population: {formatNumber(country?.population)} • Timezones: {timezones}</p><p className='opacity-80 text-sm'>Languages: {toList(country?.languages)} • Currencies: {toList(country?.currencies)}</p></div></div>{loadingWeather && <Spinner label='Loading weather...' />}{errorWeather && <p className='text-red-600'>{String(errorWeather)}</p>}{weather && <WeatherCard data={weather} />}</section>); }
